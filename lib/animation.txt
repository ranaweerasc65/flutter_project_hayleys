class AnimatedWavesBackground extends StatefulWidget {
  final Widget child;
  const AnimatedWavesBackground({Key? key, required this.child})
      : super(key: key);

  @override
  _AnimatedWavesBackgroundState createState() =>
      _AnimatedWavesBackgroundState();
}

class _AnimatedWavesBackgroundState extends State<AnimatedWavesBackground>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 10), // Slow wave movement
    )..repeat();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Positioned.fill(
          child: AnimatedBuilder(
            animation: _controller,
            builder: (context, child) {
              return CustomPaint(
                painter: WavePainter(_controller.value),
              );
            },
          ),
        ),
        widget.child,
      ],
    );
  }
}

class WavePainter extends CustomPainter {
  final double animationValue;
  WavePainter(this.animationValue);

  @override
  void paint(Canvas canvas, Size size) {
    Paint wavePaint = Paint()
      ..style = PaintingStyle.fill
      ..color = Colors.green.withOpacity(0.2);
    _drawWave(canvas, size, wavePaint, 1.0, 20, 0);
    _drawWave(canvas, size, wavePaint..color = Colors.blue.withOpacity(0.15),
        0.8, 15, pi / 2);
    _drawWave(canvas, size, wavePaint..color = Colors.blue.withOpacity(0.1),
        0.6, 10, pi);
  }

  void _drawWave(Canvas canvas, Size size, Paint paint, double amplitude,
      double waveHeight, double phaseShift) {
    Path path = Path();
    double waveFrequency = 2.0 * pi / size.width; // Controls wave length
    double yOffset = size.height * 0.8; // Adjust wave height position

    path.moveTo(0, yOffset);

    for (double x = 0; x <= size.width; x++) {
      double y = yOffset +
          sin((x * waveFrequency) + (animationValue * 2 * pi) + phaseShift) *
              waveHeight *
              amplitude;
      path.lineTo(x, y);
    }

    path.lineTo(size.width, size.height);
    path.lineTo(0, size.height);
    path.close();

    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(WavePainter oldDelegate) {
    return oldDelegate.animationValue != animationValue;
  }
}
